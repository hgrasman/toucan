/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 39.4.5 Tue Sep  3 18:00:04 2024.
 */

#ifndef KMS_DBC_REAL_TIME_PART_H
#define KMS_DBC_REAL_TIME_PART_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define KMS_DBC_REAL_TIME_PART_NEW_MESSAGE_20_FRAME_ID (0x00u)
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_FRAME_ID (0x40e8001u)
#define KMS_DBC_REAL_TIME_PART_LIMIT_CUR_FRAME_ID (0x40d8001u)
#define KMS_DBC_REAL_TIME_PART_CALENDAR_FRAME_ID (0x40c8001u)
#define KMS_DBC_REAL_TIME_PART_CHARGING_MESSAGE_FRAME_ID (0x40b8001u)
#define KMS_DBC_REAL_TIME_PART_BAL_ST_MESSAGE_FRAME_ID (0x40a8001u)
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE2_FRAME_ID (0x4088001u)
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE1_FRAME_ID (0x4078001u)
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE0_FRAME_ID (0x4068001u)
#define KMS_DBC_REAL_TIME_PART_TEMP_STATISTICS_FRAME_ID (0x4058001u)
#define KMS_DBC_REAL_TIME_PART_VOLT_STATISTICS_FRAME_ID (0x4048001u)
#define KMS_DBC_REAL_TIME_PART_CELL_TEMP_FRAME_ID (0x4018001u)
#define KMS_DBC_REAL_TIME_PART_CELL_VOLT_FRAME_ID (0x4008001u)
#define KMS_DBC_REAL_TIME_PART_BATTER_SUM_SINGAL1_FRAME_ID (0x4038001u)
#define KMS_DBC_REAL_TIME_PART_BATTER_SUM_SINGAL0_FRAME_ID (0x4028001u)

/* Frame lengths in bytes. */
#define KMS_DBC_REAL_TIME_PART_NEW_MESSAGE_20_LENGTH (8u)
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_LENGTH (8u)
#define KMS_DBC_REAL_TIME_PART_LIMIT_CUR_LENGTH (8u)
#define KMS_DBC_REAL_TIME_PART_CALENDAR_LENGTH (6u)
#define KMS_DBC_REAL_TIME_PART_CHARGING_MESSAGE_LENGTH (3u)
#define KMS_DBC_REAL_TIME_PART_BAL_ST_MESSAGE_LENGTH (8u)
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE2_LENGTH (8u)
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE1_LENGTH (5u)
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE0_LENGTH (5u)
#define KMS_DBC_REAL_TIME_PART_TEMP_STATISTICS_LENGTH (5u)
#define KMS_DBC_REAL_TIME_PART_VOLT_STATISTICS_LENGTH (8u)
#define KMS_DBC_REAL_TIME_PART_CELL_TEMP_LENGTH (8u)
#define KMS_DBC_REAL_TIME_PART_CELL_VOLT_LENGTH (8u)
#define KMS_DBC_REAL_TIME_PART_BATTER_SUM_SINGAL1_LENGTH (8u)
#define KMS_DBC_REAL_TIME_PART_BATTER_SUM_SINGAL0_LENGTH (7u)

/* Extended or standard frame types. */
#define KMS_DBC_REAL_TIME_PART_NEW_MESSAGE_20_IS_EXTENDED (0)
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_IS_EXTENDED (1)
#define KMS_DBC_REAL_TIME_PART_LIMIT_CUR_IS_EXTENDED (1)
#define KMS_DBC_REAL_TIME_PART_CALENDAR_IS_EXTENDED (1)
#define KMS_DBC_REAL_TIME_PART_CHARGING_MESSAGE_IS_EXTENDED (1)
#define KMS_DBC_REAL_TIME_PART_BAL_ST_MESSAGE_IS_EXTENDED (1)
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE2_IS_EXTENDED (1)
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE1_IS_EXTENDED (1)
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE0_IS_EXTENDED (1)
#define KMS_DBC_REAL_TIME_PART_TEMP_STATISTICS_IS_EXTENDED (1)
#define KMS_DBC_REAL_TIME_PART_VOLT_STATISTICS_IS_EXTENDED (1)
#define KMS_DBC_REAL_TIME_PART_CELL_TEMP_IS_EXTENDED (1)
#define KMS_DBC_REAL_TIME_PART_CELL_VOLT_IS_EXTENDED (1)
#define KMS_DBC_REAL_TIME_PART_BATTER_SUM_SINGAL1_IS_EXTENDED (1)
#define KMS_DBC_REAL_TIME_PART_BATTER_SUM_SINGAL0_IS_EXTENDED (1)

/* Frame cycle times in milliseconds. */


/* Signal choices. */
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_MOS_T_H_MOS________1___CHOICE (1u)
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_MOS_T_H_MOS________2___CHOICE (2u)
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_MOS_T_H_MOS________3___CHOICE (3u)

#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_CELL_V_H_________1___CHOICE (1u)
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_CELL_V_H_________2___CHOICE (2u)
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_CELL_V_H_________3___CHOICE (3u)

#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_THERMAL_RUNAWAY_______1___CHOICE (1u)
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_THERMAL_RUNAWAY_______2___CHOICE (2u)
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_THERMAL_RUNAWAY_______3___CHOICE (3u)

#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_CELL_V_L_________1___CHOICE (1u)
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_CELL_V_L_________2___CHOICE (2u)
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_CELL_V_L_________3___CHOICE (3u)

#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_DETAL_V_H_________1___CHOICE (1u)
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_DETAL_V_H_________2___CHOICE (2u)
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_DETAL_V_H_________3___CHOICE (3u)

#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_CELL_T_CHG_H_____________1___CHOICE (1u)
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_CELL_T_CHG_H_____________2___CHOICE (2u)
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_CELL_T_CHG_H_____________3___CHOICE (3u)

#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_CELL_T_CHG_L_____________1___CHOICE (1u)
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_CELL_T_CHG_L_____________2___CHOICE (2u)
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_CELL_T_CHG_L_____________3___CHOICE (3u)

#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_CELL_T_DSG_H_____________1___CHOICE (1u)
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_CELL_T_DSG_H_____________2___CHOICE (2u)
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_CELL_T_DSG_H_____________3___CHOICE (3u)

#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_CELL_T_DSG_L_____________1___CHOICE (1u)
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_CELL_T_DSG_L_____________2___CHOICE (2u)
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_CELL_T_DSG_L_____________3___CHOICE (3u)

#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_DETAL_T_H_________1___CHOICE (1u)
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_DETAL_T_H_________2___CHOICE (2u)
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_DETAL_T_H_________3___CHOICE (3u)

#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_SUM_V_H_________1___CHOICE (1u)
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_SUM_V_H_________2___CHOICE (2u)
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_SUM_V_H_________3___CHOICE (3u)

#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_SUM_V_L_________1___CHOICE (1u)
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_SUM_V_L_________2___CHOICE (2u)
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_SUM_V_L_________3___CHOICE (3u)

#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_SHORT_PROTECT__________CHOICE (1u)

#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_CUR_CHG_H_____________1___CHOICE (1u)
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_CUR_CHG_H_____________2___CHOICE (2u)
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_CUR_CHG_H_____________3___CHOICE (3u)

#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_CUR_DSG_H_____________1___CHOICE (1u)
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_CUR_DSG_H_____________2___CHOICE (2u)
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_CUR_DSG_H_____________3___CHOICE (3u)

#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_AFE_PF_DET_ST______________CHOICE (1u)

#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_PCH_FAILED__________CHOICE (1u)

#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_COMM_OFF_CHG_MOS_____________MOS_CHOICE (1u)

#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_SOC_L_SOC____1___CHOICE (1u)
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_SOC_L_SOC____2___CHOICE (2u)
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_SOC_L_SOC____3___CHOICE (3u)

#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_COMM_OFF_DSG_MOS_____________MOS_CHOICE (1u)

#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_KEY_OFF_DSG_MOS_____________MOS_____CHOICE (1u)

#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_SOH_L_SOH____1___CHOICE (1u)
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_SOH_L_SOH____2___CHOICE (2u)
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_SOH_L_SOH____3___CHOICE (3u)

#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_HEAT_ST__________CHOICE (1u)

#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_LIMIT_ST__________CHOICE (1u)

#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_HEAT_ERROR__________CHOICE (1u)

#define KMS_DBC_REAL_TIME_PART_LIMIT_CUR_LIMIT_CUR_STATE__________0_CHOICE (0u)
#define KMS_DBC_REAL_TIME_PART_LIMIT_CUR_LIMIT_CUR_STATE__________1_CHOICE (1u)

#define KMS_DBC_REAL_TIME_PART_CHARGING_MESSAGE_WAKEUP_SOURCE______________CHOICE (1u)
#define KMS_DBC_REAL_TIME_PART_CHARGING_MESSAGE_WAKEUP_SOURCE__________2_CHOICE (2u)
#define KMS_DBC_REAL_TIME_PART_CHARGING_MESSAGE_WAKEUP_SOURCE_485_____CHOICE (4u)
#define KMS_DBC_REAL_TIME_PART_CHARGING_MESSAGE_WAKEUP_SOURCE_CAN_____CHOICE (8u)
#define KMS_DBC_REAL_TIME_PART_CHARGING_MESSAGE_WAKEUP_SOURCE__________16_CHOICE (16u)

#define KMS_DBC_REAL_TIME_PART_BAL_ST_MESSAGE_BALANCE_STATE__________0_CHOICE (0u)
#define KMS_DBC_REAL_TIME_PART_BAL_ST_MESSAGE_BALANCE_STATE__________1_CHOICE (1u)

#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE1_BAT_STATE__________0_CHOICE (0u)
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE1_BAT_STATE__________1_CHOICE (1u)
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE1_BAT_STATE__________2_CHOICE (2u)

#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE1_CHG_DETECT____________0_CHOICE (0u)
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE1_CHG_DETECT____________1_CHOICE (1u)

#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE1_LOARD_DETECT__________0_CHOICE (0u)
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE1_LOARD_DETECT__________1_CHOICE (1u)

#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE1_DO_STATE_DO1____OFF__DO2____OFF_CHOICE (0u)
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE1_DO_STATE_DO1____ON__DO2____OFF_CHOICE (1u)
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE1_DO_STATE_DO2____ON__DO1____OFF_CHOICE (2u)
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE1_DO_STATE_DO1____ON__DO2____ON_CHOICE (3u)

#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE1_DI_STATE_DI1_______CHOICE (1u)

#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE0_CHG_MOS_STATE_____MOS_____0_CHOICE (0u)
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE0_CHG_MOS_STATE_____MOS_____1_CHOICE (1u)

#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE0_DIS_CHG_MOS_STATE_____MOS_____0_CHOICE (0u)
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE0_DIS_CHG_MOS_STATE_____MOS_____1_CHOICE (1u)

#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE0_PRE_MOS_STATE_____MOS_____0_CHOICE (0u)
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE0_PRE_MOS_STATE_____MOS_____1_CHOICE (1u)

#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE0_HEAT_MOS_STATE_____MOS_____0_CHOICE (0u)
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE0_HEAT_MOS_STATE_____MOS_____1_CHOICE (1u)

#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE0_FAN_MOS_STATE_____MOS_____0_CHOICE (0u)
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE0_FAN_MOS_STATE_____MOS_____1_CHOICE (1u)

/* Frame Names. */
#define KMS_DBC_REAL_TIME_PART_NEW_MESSAGE_20_NAME "New_Message_20"
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_NAME "Fault_code"
#define KMS_DBC_REAL_TIME_PART_LIMIT_CUR_NAME "LimitCur"
#define KMS_DBC_REAL_TIME_PART_CALENDAR_NAME "Calendar"
#define KMS_DBC_REAL_TIME_PART_CHARGING_MESSAGE_NAME "Charging_Message"
#define KMS_DBC_REAL_TIME_PART_BAL_ST_MESSAGE_NAME "BalSt_Message"
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE2_NAME "Status_Message2"
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE1_NAME "Status_Message1"
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE0_NAME "Status_Message0"
#define KMS_DBC_REAL_TIME_PART_TEMP_STATISTICS_NAME "TempStatistics"
#define KMS_DBC_REAL_TIME_PART_VOLT_STATISTICS_NAME "VoltStatistics"
#define KMS_DBC_REAL_TIME_PART_CELL_TEMP_NAME "CellTemp"
#define KMS_DBC_REAL_TIME_PART_CELL_VOLT_NAME "CellVolt"
#define KMS_DBC_REAL_TIME_PART_BATTER_SUM_SINGAL1_NAME "Batter_SumSingal1"
#define KMS_DBC_REAL_TIME_PART_BATTER_SUM_SINGAL0_NAME "Batter_SumSingal0"

/* Signal Names. */
#define KMS_DBC_REAL_TIME_PART_NEW_MESSAGE_20_NEW_SIGNAL_155_NAME "New_Signal_155"
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_FAULT_FRAME_ID_NAME "Fault_FrameID"
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_MOS_T_H_NAME "MosT_H"
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_CELL_V_H_NAME "CellV_H"
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_THERMAL_RUNAWAY_NAME "ThermalRunaway"
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_CELL_V_L_NAME "CellV_L"
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_DETAL_V_H_NAME "DetalV_H"
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_CELL_T_CHG_H_NAME "CellT_ChgH"
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_CELL_T_CHG_L_NAME "CellT_ChgL"
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_CELL_T_DSG_H_NAME "CellT_DsgH"
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_CELL_T_DSG_L_NAME "CellT_DsgL"
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_DETAL_T_H_NAME "DetalT_H"
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_SUM_V_H_NAME "SumV_H"
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_SUM_V_L_NAME "SumV_L"
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_SHORT_PROTECT_NAME "ShortProtect"
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_CUR_CHG_H_NAME "Cur_ChgH"
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_CUR_DSG_H_NAME "Cur_DsgH"
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_AFE_PF_DET_ST_NAME "AfePfDetSt"
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_PCH_FAILED_NAME "PchFailed"
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_COMM_OFF_CHG_MOS_NAME "CommOffChgMos"
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_SOC_L_NAME "Soc_L"
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_COMM_OFF_DSG_MOS_NAME "CommOffDsgMos"
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_KEY_OFF_CHG_MOS_NAME "KeyOffChgMos"
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_KEY_OFF_DSG_MOS_NAME "KeyOffDsgMos"
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_SOH_L_NAME "Soh_L"
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_HEAT_ST_NAME "HeatSt"
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_LIMIT_ST_NAME "LimitSt"
#define KMS_DBC_REAL_TIME_PART_FAULT_CODE_HEAT_ERROR_NAME "HeatError"
#define KMS_DBC_REAL_TIME_PART_LIMIT_CUR_LIMIT_CUR_STATE_NAME "limit_cur_state"
#define KMS_DBC_REAL_TIME_PART_LIMIT_CUR_LIMIC_CUR_NAME "limic_cur"
#define KMS_DBC_REAL_TIME_PART_LIMIT_CUR_SOH_NAME "soh"
#define KMS_DBC_REAL_TIME_PART_LIMIT_CUR_PWM_DUTY_NAME "pwm_duty"
#define KMS_DBC_REAL_TIME_PART_CALENDAR_YEAR_NAME "Year"
#define KMS_DBC_REAL_TIME_PART_CALENDAR_MONTH_NAME "Month"
#define KMS_DBC_REAL_TIME_PART_CALENDAR_DAY_NAME "Day"
#define KMS_DBC_REAL_TIME_PART_CALENDAR_HOUR_NAME "Hour"
#define KMS_DBC_REAL_TIME_PART_CALENDAR_MINUTE_NAME "Minute"
#define KMS_DBC_REAL_TIME_PART_CALENDAR_SECOND_NAME "Second"
#define KMS_DBC_REAL_TIME_PART_CHARGING_MESSAGE_REST_CHG_TIME_NAME "Rest_chg_time"
#define KMS_DBC_REAL_TIME_PART_CHARGING_MESSAGE_WAKEUP_SOURCE_NAME "wakeup_source"
#define KMS_DBC_REAL_TIME_PART_BAL_ST_MESSAGE_BALANCE_STATE_NAME "balance_state"
#define KMS_DBC_REAL_TIME_PART_BAL_ST_MESSAGE_BALANCE_CUR_NAME "Balance_cur"
#define KMS_DBC_REAL_TIME_PART_BAL_ST_MESSAGE_BAL_BATTER_1TO8_NAME "BalBatter_1to8"
#define KMS_DBC_REAL_TIME_PART_BAL_ST_MESSAGE_BAL_BATTER_9TO16_NAME "BalBatter_9to16"
#define KMS_DBC_REAL_TIME_PART_BAL_ST_MESSAGE_BAL_BATTER_17TO24_NAME "BalBatter_17to24"
#define KMS_DBC_REAL_TIME_PART_BAL_ST_MESSAGE_BAL_BATTER_25TO32_NAME "BalBatter_25to32"
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE2_CELL_NUMBER_NAME "Cell_Number"
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE2_NTC_NUMBER_NAME "ntc_number"
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE2_REMAIN_CAPACITY_NAME "Remain_Capacity"
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE2_CYCLE_TIME_NAME "Cycle_Time"
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE1_BAT_STATE_NAME "BatState"
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE1_CHG_DETECT_NAME "ChgDetect"
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE1_LOARD_DETECT_NAME "LoardDetect"
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE1_DO_STATE_NAME "DOState"
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE1_DI_STATE_NAME "DIState"
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE0_CHG_MOS_STATE_NAME "ChgMOSState"
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE0_DIS_CHG_MOS_STATE_NAME "DisChgMOSState"
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE0_PRE_MOS_STATE_NAME "PreMOSState"
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE0_HEAT_MOS_STATE_NAME "HeatMOSState"
#define KMS_DBC_REAL_TIME_PART_STATUS_MESSAGE0_FAN_MOS_STATE_NAME "FanMOSState"
#define KMS_DBC_REAL_TIME_PART_TEMP_STATISTICS_MAX_T_NAME "MaxT"
#define KMS_DBC_REAL_TIME_PART_TEMP_STATISTICS_MAX_T_NO_NAME "MaxTNo"
#define KMS_DBC_REAL_TIME_PART_TEMP_STATISTICS_MIN_T_NAME "MinT"
#define KMS_DBC_REAL_TIME_PART_TEMP_STATISTICS_MIN_T_NO_NAME "MinTNo"
#define KMS_DBC_REAL_TIME_PART_TEMP_STATISTICS_DIFF_T_NAME "DiffT"
#define KMS_DBC_REAL_TIME_PART_VOLT_STATISTICS_MAX_V_NAME "MaxV"
#define KMS_DBC_REAL_TIME_PART_VOLT_STATISTICS_MAX_V_NO_NAME "MaxV_No"
#define KMS_DBC_REAL_TIME_PART_VOLT_STATISTICS_MIN_V_NAME "MinV"
#define KMS_DBC_REAL_TIME_PART_VOLT_STATISTICS_MIN_NO_NAME "Min_No"
#define KMS_DBC_REAL_TIME_PART_VOLT_STATISTICS_DIFF_V_NAME "DiffV"
#define KMS_DBC_REAL_TIME_PART_CELL_TEMP_CELL_TEMP_FRAME_ID_NAME "CellTempFrameId"
#define KMS_DBC_REAL_TIME_PART_CELL_TEMP_TEMPER1_NAME "Temper1"
#define KMS_DBC_REAL_TIME_PART_CELL_TEMP_TEMPER2_NAME "Temper2"
#define KMS_DBC_REAL_TIME_PART_CELL_TEMP_TEMPER3_NAME "Temper3"
#define KMS_DBC_REAL_TIME_PART_CELL_TEMP_TEMPER4_NAME "Temper4"
#define KMS_DBC_REAL_TIME_PART_CELL_TEMP_TEMPER5_NAME "Temper5"
#define KMS_DBC_REAL_TIME_PART_CELL_TEMP_TEMPER6_NAME "Temper6"
#define KMS_DBC_REAL_TIME_PART_CELL_TEMP_TEMPER7_NAME "Temper7"
#define KMS_DBC_REAL_TIME_PART_CELL_VOLT_CELL_VOLT_FRAME_ID_NAME "CellVoltFrameId"
#define KMS_DBC_REAL_TIME_PART_CELL_VOLT_VOLT7_NAME "Volt7"
#define KMS_DBC_REAL_TIME_PART_CELL_VOLT_VOLT22_NAME "Volt22"
#define KMS_DBC_REAL_TIME_PART_CELL_VOLT_VOLT19_NAME "Volt19"
#define KMS_DBC_REAL_TIME_PART_CELL_VOLT_VOLT16_NAME "Volt16"
#define KMS_DBC_REAL_TIME_PART_CELL_VOLT_VOLT13_NAME "Volt13"
#define KMS_DBC_REAL_TIME_PART_CELL_VOLT_VOLT10_NAME "Volt10"
#define KMS_DBC_REAL_TIME_PART_CELL_VOLT_VOLT4_NAME "Volt4"
#define KMS_DBC_REAL_TIME_PART_CELL_VOLT_VOLT1_NAME "Volt1"
#define KMS_DBC_REAL_TIME_PART_CELL_VOLT_VOLT8_NAME "Volt8"
#define KMS_DBC_REAL_TIME_PART_CELL_VOLT_VOLT5_NAME "Volt5"
#define KMS_DBC_REAL_TIME_PART_CELL_VOLT_VOLT23_NAME "Volt23"
#define KMS_DBC_REAL_TIME_PART_CELL_VOLT_VOLT20_NAME "Volt20"
#define KMS_DBC_REAL_TIME_PART_CELL_VOLT_VOLT17_NAME "Volt17"
#define KMS_DBC_REAL_TIME_PART_CELL_VOLT_VOLT14_NAME "Volt14"
#define KMS_DBC_REAL_TIME_PART_CELL_VOLT_VOLT11_NAME "Volt11"
#define KMS_DBC_REAL_TIME_PART_CELL_VOLT_VOLT2_NAME "Volt2"
#define KMS_DBC_REAL_TIME_PART_CELL_VOLT_VOLT9_NAME "Volt9"
#define KMS_DBC_REAL_TIME_PART_CELL_VOLT_VOLT6_NAME "Volt6"
#define KMS_DBC_REAL_TIME_PART_CELL_VOLT_VOLT24_NAME "Volt24"
#define KMS_DBC_REAL_TIME_PART_CELL_VOLT_VOLT21_NAME "Volt21"
#define KMS_DBC_REAL_TIME_PART_CELL_VOLT_VOLT18_NAME "Volt18"
#define KMS_DBC_REAL_TIME_PART_CELL_VOLT_VOLT15_NAME "Volt15"
#define KMS_DBC_REAL_TIME_PART_CELL_VOLT_VOLT12_NAME "Volt12"
#define KMS_DBC_REAL_TIME_PART_CELL_VOLT_VOLT3_NAME "Volt3"
#define KMS_DBC_REAL_TIME_PART_BATTER_SUM_SINGAL1_POWER_NAME "POWER"
#define KMS_DBC_REAL_TIME_PART_BATTER_SUM_SINGAL1_TOTAL_ENERGY_NAME "Total_Energy"
#define KMS_DBC_REAL_TIME_PART_BATTER_SUM_SINGAL1_MOS_TEMP_NAME "MOS_Temp"
#define KMS_DBC_REAL_TIME_PART_BATTER_SUM_SINGAL1_BOARD_TEMP_NAME "Board_Temp"
#define KMS_DBC_REAL_TIME_PART_BATTER_SUM_SINGAL1_HEAT_TEMP_NAME "Heat_Temp"
#define KMS_DBC_REAL_TIME_PART_BATTER_SUM_SINGAL1_HEAT_CUR_NAME "Heat_Cur"
#define KMS_DBC_REAL_TIME_PART_BATTER_SUM_SINGAL0_SUM_V_NAME "SumV"
#define KMS_DBC_REAL_TIME_PART_BATTER_SUM_SINGAL0_CUR_NAME "Cur"
#define KMS_DBC_REAL_TIME_PART_BATTER_SUM_SINGAL0_SOC_NAME "SOC"
#define KMS_DBC_REAL_TIME_PART_BATTER_SUM_SINGAL0_LIFE_NAME "Life"

/**
 * Signals in message New_Message_20.
 *
 * All signal values are as on the CAN bus.
 */
struct kms_dbc_real_time_part_new_message_20_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t new_signal_155;
};

/**
 * Signals in message Fault_code.
 *
 * All signal values are as on the CAN bus.
 */
struct kms_dbc_real_time_part_fault_code_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_frame_id;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mos_t_h;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cell_v_h;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t thermal_runaway;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cell_v_l;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t detal_v_h;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cell_t_chg_h;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cell_t_chg_l;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cell_t_dsg_h;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cell_t_dsg_l;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t detal_t_h;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sum_v_h;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sum_v_l;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t short_protect;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cur_chg_h;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cur_dsg_h;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t afe_pf_det_st;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pch_failed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t comm_off_chg_mos;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t soc_l;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t comm_off_dsg_mos;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t key_off_chg_mos;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t key_off_dsg_mos;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t soh_l;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t heat_st;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t limit_st;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t heat_error;
};

/**
 * Signals in message LimitCur.
 *
 * All signal values are as on the CAN bus.
 */
struct kms_dbc_real_time_part_limit_cur_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t limit_cur_state;

    /**
     * Range: 0..65535 (-3000..3553.5 -)
     * Scale: 0.1
     * Offset: -3000
     */
    uint16_t limic_cur;

    /**
     * Range: 0..2550 (0..255 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t soh;

    /**
     * Range: 0..655350 (0..65535 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t pwm_duty;
};

/**
 * Signals in message Calendar.
 *
 * All signal values are as on the CAN bus.
 */
struct kms_dbc_real_time_part_calendar_t {
    /**
     * Range: 0..255 (2000..2255 -)
     * Scale: 1
     * Offset: 2000
     */
    uint8_t year;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t month;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t day;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hour;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t minute;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t second;
};

/**
 * Signals in message Charging_Message.
 *
 * All signal values are as on the CAN bus.
 */
struct kms_dbc_real_time_part_charging_message_t {
    /**
     * Range: 0..65535 (0..65535 ����)
     * Scale: 1
     * Offset: 0
     */
    uint16_t rest_chg_time;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wakeup_source;
};

/**
 * Signals in message BalSt_Message.
 *
 * All signal values are as on the CAN bus.
 */
struct kms_dbc_real_time_part_bal_st_message_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t balance_state;

    /**
     * Range: 0..65535 (0..65535 mA)
     * Scale: 1
     * Offset: 0
     */
    uint16_t balance_cur;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bal_batter_1to8;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bal_batter_9to16;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bal_batter_17to24;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bal_batter_25to32;
};

/**
 * Signals in message Status_Message2.
 *
 * All signal values are as on the CAN bus.
 */
struct kms_dbc_real_time_part_status_message2_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cell_number;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ntc_number;

    /**
     * Range: 0..4294967295 (0..4294967295 mAh)
     * Scale: 1
     * Offset: 0
     */
    uint32_t remain_capacity;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t cycle_time;
};

/**
 * Signals in message Status_Message1.
 *
 * All signal values are as on the CAN bus.
 */
struct kms_dbc_real_time_part_status_message1_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bat_state;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t chg_detect;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t loard_detect;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t do_state;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t di_state;
};

/**
 * Signals in message Status_Message0.
 *
 * All signal values are as on the CAN bus.
 */
struct kms_dbc_real_time_part_status_message0_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t chg_mos_state;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dis_chg_mos_state;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pre_mos_state;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t heat_mos_state;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fan_mos_state;
};

/**
 * Signals in message TempStatistics.
 *
 * All signal values are as on the CAN bus.
 */
struct kms_dbc_real_time_part_temp_statistics_t {
    /**
     * Range: 0..255 (-40..215 -)
     * Scale: 1
     * Offset: -40
     */
    uint8_t max_t;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t max_t_no;

    /**
     * Range: 40..295 (0..255 -)
     * Scale: 1
     * Offset: -40
     */
    uint8_t min_t;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t min_t_no;

    /**
     * Range: -40..215 (-40..215 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t diff_t;
};

/**
 * Signals in message VoltStatistics.
 *
 * All signal values are as on the CAN bus.
 */
struct kms_dbc_real_time_part_volt_statistics_t {
    /**
     * Range: 0..255 (0..255 mv)
     * Scale: 1
     * Offset: 0
     */
    uint16_t max_v;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t max_v_no;

    /**
     * Range: 0..255 (0..255 mv)
     * Scale: 1
     * Offset: 0
     */
    uint16_t min_v;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t min_no;

    /**
     * Range: 0..255 (0..255 mv)
     * Scale: 1
     * Offset: 0
     */
    uint16_t diff_v;
};

/**
 * Signals in message CellTemp.
 *
 * All signal values are as on the CAN bus.
 */
struct kms_dbc_real_time_part_cell_temp_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t cell_temp_frame_id;

    /**
     * Range: -
     * Scale: 1
     * Offset: -40
     */
    int8_t temper1;

    /**
     * Range: -
     * Scale: 1
     * Offset: -40
     */
    int8_t temper2;

    /**
     * Range: -
     * Scale: 1
     * Offset: -40
     */
    int8_t temper3;

    /**
     * Range: -
     * Scale: 1
     * Offset: -40
     */
    int8_t temper4;

    /**
     * Range: -
     * Scale: 1
     * Offset: -40
     */
    int8_t temper5;

    /**
     * Range: -
     * Scale: 1
     * Offset: -40
     */
    int8_t temper6;

    /**
     * Range: -
     * Scale: 1
     * Offset: -40
     */
    int8_t temper7;
};

/**
 * Signals in message CellVolt.
 *
 * All signal values are as on the CAN bus.
 */
struct kms_dbc_real_time_part_cell_volt_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t cell_volt_frame_id;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t volt7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t volt22;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t volt19;

    /**
     * Range: -32768..32767 (-32768..32767 mv)
     * Scale: 1
     * Offset: 0
     */
    int16_t volt16;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t volt13;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t volt10;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t volt4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t volt1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t volt8;

    /**
     * Range: -32768..32767 (-32768..32767 mv)
     * Scale: 1
     * Offset: 0
     */
    int16_t volt5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t volt23;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t volt20;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t volt17;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t volt14;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t volt11;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t volt2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t volt9;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t volt6;

    /**
     * Range: -32768..32767 (-32768..32767 mv)
     * Scale: 1
     * Offset: 0
     */
    int16_t volt24;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t volt21;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t volt18;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t volt15;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t volt12;

    /**
     * Range: -32768..32767 (-32768..32767 mv)
     * Scale: 1
     * Offset: 0
     */
    int16_t volt3;
};

/**
 * Signals in message Batter_SumSingal1.
 *
 * All signal values are as on the CAN bus.
 */
struct kms_dbc_real_time_part_batter_sum_singal1_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t power;

    /**
     * Range: 0..255 (0..255 WH)
     * Scale: 1
     * Offset: 0
     */
    uint16_t total_energy;

    /**
     * Range: 40..255 (0..215 ��C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t mos_temp;

    /**
     * Range: 40..255 (0..215 ��C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t board_temp;

    /**
     * Range: 40..255 (0..215 ��C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t heat_temp;

    /**
     * Range: 0..255 (0..255 A)
     * Scale: 1
     * Offset: 0
     */
    uint8_t heat_cur;
};

/**
 * Signals in message Batter_SumSingal0.
 *
 * All signal values are as on the CAN bus.
 */
struct kms_dbc_real_time_part_batter_sum_singal0_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t sum_v;

    /**
     * Range: 0..255 (-3000..-2974.5 A)
     * Scale: 0.1
     * Offset: -3000
     */
    uint16_t cur;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t soc;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t life;
};

/**
 * Pack message New_Message_20.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int kms_dbc_real_time_part_new_message_20_pack(
    uint8_t *dst_p,
    const struct kms_dbc_real_time_part_new_message_20_t *src_p,
    size_t size);

/**
 * Unpack message New_Message_20.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int kms_dbc_real_time_part_new_message_20_unpack(
    struct kms_dbc_real_time_part_new_message_20_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from New_Message_20.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int kms_dbc_real_time_part_new_message_20_init(struct kms_dbc_real_time_part_new_message_20_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_new_message_20_new_signal_155_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_new_message_20_new_signal_155_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_new_message_20_new_signal_155_is_in_range(uint8_t value);

/**
 * Pack message Fault_code.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int kms_dbc_real_time_part_fault_code_pack(
    uint8_t *dst_p,
    const struct kms_dbc_real_time_part_fault_code_t *src_p,
    size_t size);

/**
 * Unpack message Fault_code.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int kms_dbc_real_time_part_fault_code_unpack(
    struct kms_dbc_real_time_part_fault_code_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Fault_code.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int kms_dbc_real_time_part_fault_code_init(struct kms_dbc_real_time_part_fault_code_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_fault_code_fault_frame_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_fault_code_fault_frame_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_fault_code_fault_frame_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_fault_code_mos_t_h_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_fault_code_mos_t_h_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_fault_code_mos_t_h_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_fault_code_cell_v_h_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_fault_code_cell_v_h_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_fault_code_cell_v_h_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_fault_code_thermal_runaway_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_fault_code_thermal_runaway_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_fault_code_thermal_runaway_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_fault_code_cell_v_l_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_fault_code_cell_v_l_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_fault_code_cell_v_l_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_fault_code_detal_v_h_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_fault_code_detal_v_h_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_fault_code_detal_v_h_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_fault_code_cell_t_chg_h_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_fault_code_cell_t_chg_h_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_fault_code_cell_t_chg_h_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_fault_code_cell_t_chg_l_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_fault_code_cell_t_chg_l_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_fault_code_cell_t_chg_l_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_fault_code_cell_t_dsg_h_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_fault_code_cell_t_dsg_h_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_fault_code_cell_t_dsg_h_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_fault_code_cell_t_dsg_l_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_fault_code_cell_t_dsg_l_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_fault_code_cell_t_dsg_l_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_fault_code_detal_t_h_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_fault_code_detal_t_h_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_fault_code_detal_t_h_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_fault_code_sum_v_h_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_fault_code_sum_v_h_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_fault_code_sum_v_h_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_fault_code_sum_v_l_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_fault_code_sum_v_l_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_fault_code_sum_v_l_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_fault_code_short_protect_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_fault_code_short_protect_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_fault_code_short_protect_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_fault_code_cur_chg_h_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_fault_code_cur_chg_h_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_fault_code_cur_chg_h_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_fault_code_cur_dsg_h_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_fault_code_cur_dsg_h_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_fault_code_cur_dsg_h_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_fault_code_afe_pf_det_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_fault_code_afe_pf_det_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_fault_code_afe_pf_det_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_fault_code_pch_failed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_fault_code_pch_failed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_fault_code_pch_failed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_fault_code_comm_off_chg_mos_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_fault_code_comm_off_chg_mos_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_fault_code_comm_off_chg_mos_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_fault_code_soc_l_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_fault_code_soc_l_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_fault_code_soc_l_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_fault_code_comm_off_dsg_mos_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_fault_code_comm_off_dsg_mos_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_fault_code_comm_off_dsg_mos_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_fault_code_key_off_chg_mos_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_fault_code_key_off_chg_mos_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_fault_code_key_off_chg_mos_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_fault_code_key_off_dsg_mos_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_fault_code_key_off_dsg_mos_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_fault_code_key_off_dsg_mos_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_fault_code_soh_l_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_fault_code_soh_l_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_fault_code_soh_l_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_fault_code_heat_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_fault_code_heat_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_fault_code_heat_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_fault_code_limit_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_fault_code_limit_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_fault_code_limit_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_fault_code_heat_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_fault_code_heat_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_fault_code_heat_error_is_in_range(uint8_t value);

/**
 * Pack message LimitCur.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int kms_dbc_real_time_part_limit_cur_pack(
    uint8_t *dst_p,
    const struct kms_dbc_real_time_part_limit_cur_t *src_p,
    size_t size);

/**
 * Unpack message LimitCur.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int kms_dbc_real_time_part_limit_cur_unpack(
    struct kms_dbc_real_time_part_limit_cur_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from LimitCur.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int kms_dbc_real_time_part_limit_cur_init(struct kms_dbc_real_time_part_limit_cur_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_limit_cur_limit_cur_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_limit_cur_limit_cur_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_limit_cur_limit_cur_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t kms_dbc_real_time_part_limit_cur_limic_cur_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_limit_cur_limic_cur_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_limit_cur_limic_cur_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t kms_dbc_real_time_part_limit_cur_soh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_limit_cur_soh_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_limit_cur_soh_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t kms_dbc_real_time_part_limit_cur_pwm_duty_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_limit_cur_pwm_duty_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_limit_cur_pwm_duty_is_in_range(uint16_t value);

/**
 * Pack message Calendar.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int kms_dbc_real_time_part_calendar_pack(
    uint8_t *dst_p,
    const struct kms_dbc_real_time_part_calendar_t *src_p,
    size_t size);

/**
 * Unpack message Calendar.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int kms_dbc_real_time_part_calendar_unpack(
    struct kms_dbc_real_time_part_calendar_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Calendar.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int kms_dbc_real_time_part_calendar_init(struct kms_dbc_real_time_part_calendar_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_calendar_year_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_calendar_year_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_calendar_year_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_calendar_month_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_calendar_month_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_calendar_month_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_calendar_day_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_calendar_day_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_calendar_day_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_calendar_hour_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_calendar_hour_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_calendar_hour_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_calendar_minute_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_calendar_minute_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_calendar_minute_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_calendar_second_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_calendar_second_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_calendar_second_is_in_range(uint8_t value);

/**
 * Pack message Charging_Message.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int kms_dbc_real_time_part_charging_message_pack(
    uint8_t *dst_p,
    const struct kms_dbc_real_time_part_charging_message_t *src_p,
    size_t size);

/**
 * Unpack message Charging_Message.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int kms_dbc_real_time_part_charging_message_unpack(
    struct kms_dbc_real_time_part_charging_message_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Charging_Message.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int kms_dbc_real_time_part_charging_message_init(struct kms_dbc_real_time_part_charging_message_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t kms_dbc_real_time_part_charging_message_rest_chg_time_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_charging_message_rest_chg_time_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_charging_message_rest_chg_time_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_charging_message_wakeup_source_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_charging_message_wakeup_source_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_charging_message_wakeup_source_is_in_range(uint8_t value);

/**
 * Pack message BalSt_Message.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int kms_dbc_real_time_part_bal_st_message_pack(
    uint8_t *dst_p,
    const struct kms_dbc_real_time_part_bal_st_message_t *src_p,
    size_t size);

/**
 * Unpack message BalSt_Message.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int kms_dbc_real_time_part_bal_st_message_unpack(
    struct kms_dbc_real_time_part_bal_st_message_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BalSt_Message.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int kms_dbc_real_time_part_bal_st_message_init(struct kms_dbc_real_time_part_bal_st_message_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_bal_st_message_balance_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_bal_st_message_balance_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_bal_st_message_balance_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t kms_dbc_real_time_part_bal_st_message_balance_cur_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_bal_st_message_balance_cur_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_bal_st_message_balance_cur_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_bal_st_message_bal_batter_1to8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_bal_st_message_bal_batter_1to8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_bal_st_message_bal_batter_1to8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_bal_st_message_bal_batter_9to16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_bal_st_message_bal_batter_9to16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_bal_st_message_bal_batter_9to16_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_bal_st_message_bal_batter_17to24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_bal_st_message_bal_batter_17to24_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_bal_st_message_bal_batter_17to24_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_bal_st_message_bal_batter_25to32_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_bal_st_message_bal_batter_25to32_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_bal_st_message_bal_batter_25to32_is_in_range(uint8_t value);

/**
 * Pack message Status_Message2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int kms_dbc_real_time_part_status_message2_pack(
    uint8_t *dst_p,
    const struct kms_dbc_real_time_part_status_message2_t *src_p,
    size_t size);

/**
 * Unpack message Status_Message2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int kms_dbc_real_time_part_status_message2_unpack(
    struct kms_dbc_real_time_part_status_message2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_Message2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int kms_dbc_real_time_part_status_message2_init(struct kms_dbc_real_time_part_status_message2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_status_message2_cell_number_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_status_message2_cell_number_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_status_message2_cell_number_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_status_message2_ntc_number_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_status_message2_ntc_number_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_status_message2_ntc_number_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t kms_dbc_real_time_part_status_message2_remain_capacity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_status_message2_remain_capacity_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_status_message2_remain_capacity_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t kms_dbc_real_time_part_status_message2_cycle_time_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_status_message2_cycle_time_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_status_message2_cycle_time_is_in_range(uint16_t value);

/**
 * Pack message Status_Message1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int kms_dbc_real_time_part_status_message1_pack(
    uint8_t *dst_p,
    const struct kms_dbc_real_time_part_status_message1_t *src_p,
    size_t size);

/**
 * Unpack message Status_Message1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int kms_dbc_real_time_part_status_message1_unpack(
    struct kms_dbc_real_time_part_status_message1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_Message1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int kms_dbc_real_time_part_status_message1_init(struct kms_dbc_real_time_part_status_message1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_status_message1_bat_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_status_message1_bat_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_status_message1_bat_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_status_message1_chg_detect_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_status_message1_chg_detect_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_status_message1_chg_detect_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_status_message1_loard_detect_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_status_message1_loard_detect_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_status_message1_loard_detect_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_status_message1_do_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_status_message1_do_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_status_message1_do_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_status_message1_di_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_status_message1_di_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_status_message1_di_state_is_in_range(uint8_t value);

/**
 * Pack message Status_Message0.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int kms_dbc_real_time_part_status_message0_pack(
    uint8_t *dst_p,
    const struct kms_dbc_real_time_part_status_message0_t *src_p,
    size_t size);

/**
 * Unpack message Status_Message0.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int kms_dbc_real_time_part_status_message0_unpack(
    struct kms_dbc_real_time_part_status_message0_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_Message0.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int kms_dbc_real_time_part_status_message0_init(struct kms_dbc_real_time_part_status_message0_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_status_message0_chg_mos_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_status_message0_chg_mos_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_status_message0_chg_mos_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_status_message0_dis_chg_mos_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_status_message0_dis_chg_mos_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_status_message0_dis_chg_mos_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_status_message0_pre_mos_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_status_message0_pre_mos_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_status_message0_pre_mos_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_status_message0_heat_mos_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_status_message0_heat_mos_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_status_message0_heat_mos_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_status_message0_fan_mos_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_status_message0_fan_mos_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_status_message0_fan_mos_state_is_in_range(uint8_t value);

/**
 * Pack message TempStatistics.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int kms_dbc_real_time_part_temp_statistics_pack(
    uint8_t *dst_p,
    const struct kms_dbc_real_time_part_temp_statistics_t *src_p,
    size_t size);

/**
 * Unpack message TempStatistics.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int kms_dbc_real_time_part_temp_statistics_unpack(
    struct kms_dbc_real_time_part_temp_statistics_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TempStatistics.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int kms_dbc_real_time_part_temp_statistics_init(struct kms_dbc_real_time_part_temp_statistics_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_temp_statistics_max_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_temp_statistics_max_t_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_temp_statistics_max_t_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_temp_statistics_max_t_no_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_temp_statistics_max_t_no_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_temp_statistics_max_t_no_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_temp_statistics_min_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_temp_statistics_min_t_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_temp_statistics_min_t_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_temp_statistics_min_t_no_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_temp_statistics_min_t_no_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_temp_statistics_min_t_no_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_temp_statistics_diff_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_temp_statistics_diff_t_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_temp_statistics_diff_t_is_in_range(uint8_t value);

/**
 * Pack message VoltStatistics.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int kms_dbc_real_time_part_volt_statistics_pack(
    uint8_t *dst_p,
    const struct kms_dbc_real_time_part_volt_statistics_t *src_p,
    size_t size);

/**
 * Unpack message VoltStatistics.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int kms_dbc_real_time_part_volt_statistics_unpack(
    struct kms_dbc_real_time_part_volt_statistics_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VoltStatistics.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int kms_dbc_real_time_part_volt_statistics_init(struct kms_dbc_real_time_part_volt_statistics_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t kms_dbc_real_time_part_volt_statistics_max_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_volt_statistics_max_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_volt_statistics_max_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_volt_statistics_max_v_no_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_volt_statistics_max_v_no_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_volt_statistics_max_v_no_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t kms_dbc_real_time_part_volt_statistics_min_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_volt_statistics_min_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_volt_statistics_min_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_volt_statistics_min_no_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_volt_statistics_min_no_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_volt_statistics_min_no_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t kms_dbc_real_time_part_volt_statistics_diff_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_volt_statistics_diff_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_volt_statistics_diff_v_is_in_range(uint16_t value);

/**
 * Pack message CellTemp.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int kms_dbc_real_time_part_cell_temp_pack(
    uint8_t *dst_p,
    const struct kms_dbc_real_time_part_cell_temp_t *src_p,
    size_t size);

/**
 * Unpack message CellTemp.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int kms_dbc_real_time_part_cell_temp_unpack(
    struct kms_dbc_real_time_part_cell_temp_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellTemp.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int kms_dbc_real_time_part_cell_temp_init(struct kms_dbc_real_time_part_cell_temp_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t kms_dbc_real_time_part_cell_temp_cell_temp_frame_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_cell_temp_cell_temp_frame_id_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_cell_temp_cell_temp_frame_id_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t kms_dbc_real_time_part_cell_temp_temper1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_cell_temp_temper1_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_cell_temp_temper1_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t kms_dbc_real_time_part_cell_temp_temper2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_cell_temp_temper2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_cell_temp_temper2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t kms_dbc_real_time_part_cell_temp_temper3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_cell_temp_temper3_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_cell_temp_temper3_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t kms_dbc_real_time_part_cell_temp_temper4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_cell_temp_temper4_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_cell_temp_temper4_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t kms_dbc_real_time_part_cell_temp_temper5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_cell_temp_temper5_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_cell_temp_temper5_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t kms_dbc_real_time_part_cell_temp_temper6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_cell_temp_temper6_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_cell_temp_temper6_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t kms_dbc_real_time_part_cell_temp_temper7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_cell_temp_temper7_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_cell_temp_temper7_is_in_range(int8_t value);

/**
 * Pack message CellVolt.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int kms_dbc_real_time_part_cell_volt_pack(
    uint8_t *dst_p,
    const struct kms_dbc_real_time_part_cell_volt_t *src_p,
    size_t size);

/**
 * Unpack message CellVolt.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int kms_dbc_real_time_part_cell_volt_unpack(
    struct kms_dbc_real_time_part_cell_volt_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CellVolt.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int kms_dbc_real_time_part_cell_volt_init(struct kms_dbc_real_time_part_cell_volt_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t kms_dbc_real_time_part_cell_volt_cell_volt_frame_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_cell_volt_cell_volt_frame_id_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_cell_volt_cell_volt_frame_id_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t kms_dbc_real_time_part_cell_volt_volt7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_cell_volt_volt7_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_cell_volt_volt7_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t kms_dbc_real_time_part_cell_volt_volt22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_cell_volt_volt22_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_cell_volt_volt22_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t kms_dbc_real_time_part_cell_volt_volt19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_cell_volt_volt19_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_cell_volt_volt19_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t kms_dbc_real_time_part_cell_volt_volt16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_cell_volt_volt16_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_cell_volt_volt16_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t kms_dbc_real_time_part_cell_volt_volt13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_cell_volt_volt13_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_cell_volt_volt13_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t kms_dbc_real_time_part_cell_volt_volt10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_cell_volt_volt10_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_cell_volt_volt10_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t kms_dbc_real_time_part_cell_volt_volt4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_cell_volt_volt4_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_cell_volt_volt4_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t kms_dbc_real_time_part_cell_volt_volt1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_cell_volt_volt1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_cell_volt_volt1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t kms_dbc_real_time_part_cell_volt_volt8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_cell_volt_volt8_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_cell_volt_volt8_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t kms_dbc_real_time_part_cell_volt_volt5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_cell_volt_volt5_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_cell_volt_volt5_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t kms_dbc_real_time_part_cell_volt_volt23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_cell_volt_volt23_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_cell_volt_volt23_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t kms_dbc_real_time_part_cell_volt_volt20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_cell_volt_volt20_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_cell_volt_volt20_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t kms_dbc_real_time_part_cell_volt_volt17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_cell_volt_volt17_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_cell_volt_volt17_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t kms_dbc_real_time_part_cell_volt_volt14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_cell_volt_volt14_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_cell_volt_volt14_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t kms_dbc_real_time_part_cell_volt_volt11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_cell_volt_volt11_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_cell_volt_volt11_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t kms_dbc_real_time_part_cell_volt_volt2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_cell_volt_volt2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_cell_volt_volt2_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t kms_dbc_real_time_part_cell_volt_volt9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_cell_volt_volt9_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_cell_volt_volt9_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t kms_dbc_real_time_part_cell_volt_volt6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_cell_volt_volt6_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_cell_volt_volt6_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t kms_dbc_real_time_part_cell_volt_volt24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_cell_volt_volt24_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_cell_volt_volt24_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t kms_dbc_real_time_part_cell_volt_volt21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_cell_volt_volt21_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_cell_volt_volt21_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t kms_dbc_real_time_part_cell_volt_volt18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_cell_volt_volt18_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_cell_volt_volt18_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t kms_dbc_real_time_part_cell_volt_volt15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_cell_volt_volt15_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_cell_volt_volt15_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t kms_dbc_real_time_part_cell_volt_volt12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_cell_volt_volt12_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_cell_volt_volt12_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t kms_dbc_real_time_part_cell_volt_volt3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_cell_volt_volt3_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_cell_volt_volt3_is_in_range(int16_t value);

/**
 * Pack message Batter_SumSingal1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int kms_dbc_real_time_part_batter_sum_singal1_pack(
    uint8_t *dst_p,
    const struct kms_dbc_real_time_part_batter_sum_singal1_t *src_p,
    size_t size);

/**
 * Unpack message Batter_SumSingal1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int kms_dbc_real_time_part_batter_sum_singal1_unpack(
    struct kms_dbc_real_time_part_batter_sum_singal1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Batter_SumSingal1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int kms_dbc_real_time_part_batter_sum_singal1_init(struct kms_dbc_real_time_part_batter_sum_singal1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t kms_dbc_real_time_part_batter_sum_singal1_power_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_batter_sum_singal1_power_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_batter_sum_singal1_power_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t kms_dbc_real_time_part_batter_sum_singal1_total_energy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_batter_sum_singal1_total_energy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_batter_sum_singal1_total_energy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_batter_sum_singal1_mos_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_batter_sum_singal1_mos_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_batter_sum_singal1_mos_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_batter_sum_singal1_board_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_batter_sum_singal1_board_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_batter_sum_singal1_board_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_batter_sum_singal1_heat_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_batter_sum_singal1_heat_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_batter_sum_singal1_heat_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t kms_dbc_real_time_part_batter_sum_singal1_heat_cur_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_batter_sum_singal1_heat_cur_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_batter_sum_singal1_heat_cur_is_in_range(uint8_t value);

/**
 * Pack message Batter_SumSingal0.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int kms_dbc_real_time_part_batter_sum_singal0_pack(
    uint8_t *dst_p,
    const struct kms_dbc_real_time_part_batter_sum_singal0_t *src_p,
    size_t size);

/**
 * Unpack message Batter_SumSingal0.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int kms_dbc_real_time_part_batter_sum_singal0_unpack(
    struct kms_dbc_real_time_part_batter_sum_singal0_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Batter_SumSingal0.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int kms_dbc_real_time_part_batter_sum_singal0_init(struct kms_dbc_real_time_part_batter_sum_singal0_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t kms_dbc_real_time_part_batter_sum_singal0_sum_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_batter_sum_singal0_sum_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_batter_sum_singal0_sum_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t kms_dbc_real_time_part_batter_sum_singal0_cur_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_batter_sum_singal0_cur_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_batter_sum_singal0_cur_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t kms_dbc_real_time_part_batter_sum_singal0_soc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_batter_sum_singal0_soc_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_batter_sum_singal0_soc_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t kms_dbc_real_time_part_batter_sum_singal0_life_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double kms_dbc_real_time_part_batter_sum_singal0_life_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool kms_dbc_real_time_part_batter_sum_singal0_life_is_in_range(int8_t value);


#ifdef __cplusplus
}
#endif

#endif
