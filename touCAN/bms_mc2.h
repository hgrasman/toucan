/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 39.4.5 Wed Apr 10 10:17:35 2024.
 */

#ifndef BMS_MC2_H
#define BMS_MC2_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define BMS_MC2_BMS_DATA_A_FRAME_ID (0x61u)
#define BMS_MC2_BMS_DATA_B_FRAME_ID (0x62u)
#define BMS_MC2_BMS_DATA_C_FRAME_ID (0x63u)
#define BMS_MC2_BMS_DATA_D_FRAME_ID (0x64u)
#define BMS_MC2_BMS_DATA_E_FRAME_ID (0x65u)
#define BMS_MC2_BMS_DATA_F_FRAME_ID (0x66u)
#define BMS_MC2_BMS_DATA_G_FRAME_ID (0x67u)
#define BMS_MC2_CONFIG_DATA_COMMAND_FRAME_ID (0x4eau)
#define BMS_MC2_CONFIG_DATA_RESPONSE_FRAME_ID (0x4ecu)
#define BMS_MC2_URGENT_STATUS_FRAME_ID (0x10u)

/* Frame lengths in bytes. */
#define BMS_MC2_BMS_DATA_A_LENGTH (8u)
#define BMS_MC2_BMS_DATA_B_LENGTH (8u)
#define BMS_MC2_BMS_DATA_C_LENGTH (8u)
#define BMS_MC2_BMS_DATA_D_LENGTH (8u)
#define BMS_MC2_BMS_DATA_E_LENGTH (8u)
#define BMS_MC2_BMS_DATA_F_LENGTH (8u)
#define BMS_MC2_BMS_DATA_G_LENGTH (8u)
#define BMS_MC2_CONFIG_DATA_COMMAND_LENGTH (8u)
#define BMS_MC2_CONFIG_DATA_RESPONSE_LENGTH (8u)
#define BMS_MC2_URGENT_STATUS_LENGTH (8u)

/* Extended or standard frame types. */
#define BMS_MC2_BMS_DATA_A_IS_EXTENDED (0)
#define BMS_MC2_BMS_DATA_B_IS_EXTENDED (0)
#define BMS_MC2_BMS_DATA_C_IS_EXTENDED (0)
#define BMS_MC2_BMS_DATA_D_IS_EXTENDED (0)
#define BMS_MC2_BMS_DATA_E_IS_EXTENDED (0)
#define BMS_MC2_BMS_DATA_F_IS_EXTENDED (0)
#define BMS_MC2_BMS_DATA_G_IS_EXTENDED (0)
#define BMS_MC2_CONFIG_DATA_COMMAND_IS_EXTENDED (0)
#define BMS_MC2_CONFIG_DATA_RESPONSE_IS_EXTENDED (0)
#define BMS_MC2_URGENT_STATUS_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/* Frame Names. */
#define BMS_MC2_BMS_DATA_A_NAME "BMSData_A"
#define BMS_MC2_BMS_DATA_B_NAME "BMSData_B"
#define BMS_MC2_BMS_DATA_C_NAME "BMSData_C"
#define BMS_MC2_BMS_DATA_D_NAME "BMSData_D"
#define BMS_MC2_BMS_DATA_E_NAME "BMSData_E"
#define BMS_MC2_BMS_DATA_F_NAME "BMSData_F"
#define BMS_MC2_BMS_DATA_G_NAME "BMSData_G"
#define BMS_MC2_CONFIG_DATA_COMMAND_NAME "ConfigDataCommand"
#define BMS_MC2_CONFIG_DATA_RESPONSE_NAME "ConfigDataResponse"
#define BMS_MC2_URGENT_STATUS_NAME "UrgentStatus"

/* Signal Names. */
#define BMS_MC2_BMS_DATA_A_CELL_1_VOLTAGE_NAME "Cell_1Voltage"
#define BMS_MC2_BMS_DATA_A_CELL_2_VOLTAGE_NAME "Cell_2Voltage"
#define BMS_MC2_BMS_DATA_A_CELL_3_VOLTAGE_NAME "Cell_3Voltage"
#define BMS_MC2_BMS_DATA_A_CELL_4_VOLTAGE_NAME "Cell_4Voltage"
#define BMS_MC2_BMS_DATA_B_CELL_5_VOLTAGE_NAME "Cell_5Voltage"
#define BMS_MC2_BMS_DATA_B_CELL_6_VOLTAGE_NAME "Cell_6Voltage"
#define BMS_MC2_BMS_DATA_B_CELL_7_VOLTAGE_NAME "Cell_7Voltage"
#define BMS_MC2_BMS_DATA_B_CELL_8_VOLTAGE_NAME "Cell_8Voltage"
#define BMS_MC2_BMS_DATA_C_CELL_9_VOLTAGE_NAME "Cell_9Voltage"
#define BMS_MC2_BMS_DATA_C_CELL_10_VOLTAGE_NAME "Cell_10Voltage"
#define BMS_MC2_BMS_DATA_C_CELL_11_VOLTAGE_NAME "Cell_11Voltage"
#define BMS_MC2_BMS_DATA_C_CELL_12_VOLTAGE_NAME "Cell_12Voltage"
#define BMS_MC2_BMS_DATA_D_CELL_13_VOLTAGE_NAME "Cell_13Voltage"
#define BMS_MC2_BMS_DATA_D_CELL_14_VOLTAGE_NAME "Cell_14Voltage"
#define BMS_MC2_BMS_DATA_D_CELL_15_VOLTAGE_NAME "Cell_15Voltage"
#define BMS_MC2_BMS_DATA_D_CELL_16_VOLTAGE_NAME "Cell_16Voltage"
#define BMS_MC2_BMS_DATA_E_TEMP1_NAME "Temp1"
#define BMS_MC2_BMS_DATA_E_TEMP2_NAME "Temp2"
#define BMS_MC2_BMS_DATA_E_TEMP3_NAME "Temp3"
#define BMS_MC2_BMS_DATA_E_TEMP4_NAME "Temp4"
#define BMS_MC2_BMS_DATA_F_TEMP5_NAME "Temp5"
#define BMS_MC2_BMS_DATA_F_TEMP6_NAME "Temp6"
#define BMS_MC2_BMS_DATA_F_TEMP7_NAME "Temp7"
#define BMS_MC2_BMS_DATA_F_TEMP8_NAME "Temp8"
#define BMS_MC2_BMS_DATA_G_TEMP9_NAME "Temp9"
#define BMS_MC2_BMS_DATA_G_TEMP10_NAME "Temp10"
#define BMS_MC2_BMS_DATA_G_TEMP11_NAME "Temp11"
#define BMS_MC2_BMS_DATA_G_CURRENT_NAME "Current"
#define BMS_MC2_CONFIG_DATA_COMMAND_CALIBRATION_ID_NAME "CalibrationID"
#define BMS_MC2_CONFIG_DATA_COMMAND_STORE_CHANGES_FLAG_NAME "StoreChangesFlag"
#define BMS_MC2_CONFIG_DATA_COMMAND_UPDATE_VALUE_FLAG_NAME "UpdateValueFlag"
#define BMS_MC2_CONFIG_DATA_COMMAND_CHECK_VALUE_FLAG_NAME "CheckValueFlag"
#define BMS_MC2_CONFIG_DATA_COMMAND_VALUE_INDEX_NAME "ValueIndex"
#define BMS_MC2_CONFIG_DATA_COMMAND_CHARGER_PRESENT_NAME "ChargerPresent"
#define BMS_MC2_CONFIG_DATA_COMMAND_REQUEST_BALANCING_NAME "RequestBalancing"
#define BMS_MC2_CONFIG_DATA_COMMAND_REQUEST_REPORT_NOW_NAME "RequestReportNow"
#define BMS_MC2_CONFIG_DATA_COMMAND_RAW_FLOAT_NAME "RawFloat"
#define BMS_MC2_CONFIG_DATA_RESPONSE_CALIBRATION_ID_NAME "CalibrationID"
#define BMS_MC2_CONFIG_DATA_RESPONSE_UNKNOWN_ID_NAME "UnknownID"
#define BMS_MC2_CONFIG_DATA_RESPONSE_UPDATE_SUCCESS_NAME "UpdateSuccess"
#define BMS_MC2_CONFIG_DATA_RESPONSE_STORE_SUCCESS_NAME "StoreSuccess"
#define BMS_MC2_CONFIG_DATA_RESPONSE_VALUE_INDEX_NAME "ValueIndex"
#define BMS_MC2_CONFIG_DATA_RESPONSE_CHARGING_NAME "Charging"
#define BMS_MC2_CONFIG_DATA_RESPONSE_BALANCING_NAME "Balancing"
#define BMS_MC2_CONFIG_DATA_RESPONSE_RAW_FLOAT_NAME "RawFloat"
#define BMS_MC2_URGENT_STATUS_NOT_CONFIGURED_NAME "NotConfigured"
#define BMS_MC2_URGENT_STATUS_OVER_VOLTAGE_NAME "OverVoltage"
#define BMS_MC2_URGENT_STATUS_OVER_TEMP_NAME "OverTemp"
#define BMS_MC2_URGENT_STATUS_OVER_DISCHARGE_NAME "OverDischarge"
#define BMS_MC2_URGENT_STATUS_UNDER_VOLTAGE_NAME "UnderVoltage"
#define BMS_MC2_URGENT_STATUS_UNDER_TEMP_NAME "UnderTemp"
#define BMS_MC2_URGENT_STATUS_OVER_CHARGE_NAME "OverCharge"
#define BMS_MC2_URGENT_STATUS_LOST_COMMS_NAME "LostComms"
#define BMS_MC2_URGENT_STATUS_OUT_OF_BALANCE_NAME "OutOfBalance"

/**
 * Signals in message BMSData_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bms_mc2_bms_data_a_t {
    /**
     * Range: 0..32768 (0..5 Volts)
     * Scale: 0.00015258789
     * Offset: 0
     */
    uint16_t cell_1_voltage;

    /**
     * Range: 0..32768 (0..5 Volts)
     * Scale: 0.00015258789
     * Offset: 0
     */
    uint16_t cell_2_voltage;

    /**
     * Range: 0..32768 (0..5 Volts)
     * Scale: 0.00015258789
     * Offset: 0
     */
    uint16_t cell_3_voltage;

    /**
     * Range: 0..32768 (0..5 Volts)
     * Scale: 0.00015258789
     * Offset: 0
     */
    uint16_t cell_4_voltage;
};

/**
 * Signals in message BMSData_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bms_mc2_bms_data_b_t {
    /**
     * Range: 0..32768 (0..5 Volts)
     * Scale: 0.00015258789
     * Offset: 0
     */
    uint16_t cell_5_voltage;

    /**
     * Range: 0..32768 (0..5 Volts)
     * Scale: 0.00015258789
     * Offset: 0
     */
    uint16_t cell_6_voltage;

    /**
     * Range: 0..32768 (0..5 Volts)
     * Scale: 0.00015258789
     * Offset: 0
     */
    uint16_t cell_7_voltage;

    /**
     * Range: 0..32768 (0..5 Volts)
     * Scale: 0.00015258789
     * Offset: 0
     */
    uint16_t cell_8_voltage;
};

/**
 * Signals in message BMSData_C.
 *
 * All signal values are as on the CAN bus.
 */
struct bms_mc2_bms_data_c_t {
    /**
     * Range: 0..32768 (0..5 Volts)
     * Scale: 0.00015258789
     * Offset: 0
     */
    uint16_t cell_9_voltage;

    /**
     * Range: 0..32768 (0..5 Volts)
     * Scale: 0.00015258789
     * Offset: 0
     */
    uint16_t cell_10_voltage;

    /**
     * Range: 0..32768 (0..5 Volts)
     * Scale: 0.00015258789
     * Offset: 0
     */
    uint16_t cell_11_voltage;

    /**
     * Range: 0..32768 (0..5 Volts)
     * Scale: 0.00015258789
     * Offset: 0
     */
    uint16_t cell_12_voltage;
};

/**
 * Signals in message BMSData_D.
 *
 * All signal values are as on the CAN bus.
 */
struct bms_mc2_bms_data_d_t {
    /**
     * Range: 0..32768 (0..5 Volts)
     * Scale: 0.00015258789
     * Offset: 0
     */
    uint16_t cell_13_voltage;

    /**
     * Range: 0..32768 (0..5 Volts)
     * Scale: 0.00015258789
     * Offset: 0
     */
    uint16_t cell_14_voltage;

    /**
     * Range: 0..32768 (0..5 Volts)
     * Scale: 0.00015258789
     * Offset: 0
     */
    uint16_t cell_15_voltage;

    /**
     * Range: 0..32768 (0..5 Volts)
     * Scale: 0.00015258789
     * Offset: 0
     */
    uint16_t cell_16_voltage;
};

/**
 * Signals in message BMSData_E.
 *
 * All signal values are as on the CAN bus.
 */
struct bms_mc2_bms_data_e_t {
    /**
     * Range: 0..65535 (-40..100 Deg C)
     * Scale: 0.00213626306
     * Offset: -40
     */
    uint16_t temp1;

    /**
     * Range: 0..65535 (-40..100 Deg C)
     * Scale: 0.00213626306
     * Offset: -40
     */
    uint16_t temp2;

    /**
     * Range: 0..65535 (-40..100 Deg C)
     * Scale: 0.00213626306
     * Offset: -40
     */
    uint16_t temp3;

    /**
     * Range: 0..65535 (-40..100 Deg C)
     * Scale: 0.00213626306
     * Offset: -40
     */
    uint16_t temp4;
};

/**
 * Signals in message BMSData_F.
 *
 * All signal values are as on the CAN bus.
 */
struct bms_mc2_bms_data_f_t {
    /**
     * Range: 0..65535 (-40..100 Deg C)
     * Scale: 0.00213626306
     * Offset: -40
     */
    uint16_t temp5;

    /**
     * Range: 0..65535 (-40..100 Deg C)
     * Scale: 0.00213626306
     * Offset: -40
     */
    uint16_t temp6;

    /**
     * Range: 0..65535 (-40..100 Deg C)
     * Scale: 0.00213626306
     * Offset: -40
     */
    uint16_t temp7;

    /**
     * Range: 0..65535 (-40..100 Deg C)
     * Scale: 0.00213626306
     * Offset: -40
     */
    uint16_t temp8;
};

/**
 * Signals in message BMSData_G.
 *
 * All signal values are as on the CAN bus.
 */
struct bms_mc2_bms_data_g_t {
    /**
     * Range: 0..65535 (-40..100 Counts)
     * Scale: 0.00213626306
     * Offset: -40
     */
    uint16_t temp9;

    /**
     * Range: 0..65535 (-40..100 Counts)
     * Scale: 0.00213626306
     * Offset: -40
     */
    uint16_t temp10;

    /**
     * Range: 0..65535 (-40..100 Counts)
     * Scale: 0.00213626306
     * Offset: -40
     */
    uint16_t temp11;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t current;
};

/**
 * Signals in message ConfigDataCommand.
 *
 * All signal values are as on the CAN bus.
 */
struct bms_mc2_config_data_command_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t calibration_id;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t store_changes_flag;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t update_value_flag;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t check_value_flag;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t value_index;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t charger_present;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t request_balancing;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t request_report_now;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t raw_float;
};

/**
 * Signals in message ConfigDataResponse.
 *
 * All signal values are as on the CAN bus.
 */
struct bms_mc2_config_data_response_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t calibration_id;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t unknown_id;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t update_success;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t store_success;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t value_index;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t charging;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t balancing;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t raw_float;
};

/**
 * Signals in message UrgentStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct bms_mc2_urgent_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t not_configured;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t over_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t over_temp;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t over_discharge;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t under_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t under_temp;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t over_charge;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t lost_comms;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t out_of_balance;
};

/**
 * Pack message BMSData_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_mc2_bms_data_a_pack(
    uint8_t *dst_p,
    const struct bms_mc2_bms_data_a_t *src_p,
    size_t size);

/**
 * Unpack message BMSData_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_mc2_bms_data_a_unpack(
    struct bms_mc2_bms_data_a_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMSData_A.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bms_mc2_bms_data_a_init(struct bms_mc2_bms_data_a_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_mc2_bms_data_a_cell_1_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_bms_data_a_cell_1_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_bms_data_a_cell_1_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_mc2_bms_data_a_cell_2_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_bms_data_a_cell_2_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_bms_data_a_cell_2_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_mc2_bms_data_a_cell_3_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_bms_data_a_cell_3_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_bms_data_a_cell_3_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_mc2_bms_data_a_cell_4_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_bms_data_a_cell_4_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_bms_data_a_cell_4_voltage_is_in_range(uint16_t value);

/**
 * Pack message BMSData_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_mc2_bms_data_b_pack(
    uint8_t *dst_p,
    const struct bms_mc2_bms_data_b_t *src_p,
    size_t size);

/**
 * Unpack message BMSData_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_mc2_bms_data_b_unpack(
    struct bms_mc2_bms_data_b_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMSData_B.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bms_mc2_bms_data_b_init(struct bms_mc2_bms_data_b_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_mc2_bms_data_b_cell_5_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_bms_data_b_cell_5_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_bms_data_b_cell_5_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_mc2_bms_data_b_cell_6_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_bms_data_b_cell_6_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_bms_data_b_cell_6_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_mc2_bms_data_b_cell_7_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_bms_data_b_cell_7_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_bms_data_b_cell_7_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_mc2_bms_data_b_cell_8_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_bms_data_b_cell_8_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_bms_data_b_cell_8_voltage_is_in_range(uint16_t value);

/**
 * Pack message BMSData_C.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_mc2_bms_data_c_pack(
    uint8_t *dst_p,
    const struct bms_mc2_bms_data_c_t *src_p,
    size_t size);

/**
 * Unpack message BMSData_C.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_mc2_bms_data_c_unpack(
    struct bms_mc2_bms_data_c_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMSData_C.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bms_mc2_bms_data_c_init(struct bms_mc2_bms_data_c_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_mc2_bms_data_c_cell_9_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_bms_data_c_cell_9_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_bms_data_c_cell_9_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_mc2_bms_data_c_cell_10_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_bms_data_c_cell_10_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_bms_data_c_cell_10_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_mc2_bms_data_c_cell_11_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_bms_data_c_cell_11_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_bms_data_c_cell_11_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_mc2_bms_data_c_cell_12_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_bms_data_c_cell_12_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_bms_data_c_cell_12_voltage_is_in_range(uint16_t value);

/**
 * Pack message BMSData_D.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_mc2_bms_data_d_pack(
    uint8_t *dst_p,
    const struct bms_mc2_bms_data_d_t *src_p,
    size_t size);

/**
 * Unpack message BMSData_D.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_mc2_bms_data_d_unpack(
    struct bms_mc2_bms_data_d_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMSData_D.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bms_mc2_bms_data_d_init(struct bms_mc2_bms_data_d_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_mc2_bms_data_d_cell_13_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_bms_data_d_cell_13_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_bms_data_d_cell_13_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_mc2_bms_data_d_cell_14_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_bms_data_d_cell_14_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_bms_data_d_cell_14_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_mc2_bms_data_d_cell_15_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_bms_data_d_cell_15_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_bms_data_d_cell_15_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_mc2_bms_data_d_cell_16_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_bms_data_d_cell_16_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_bms_data_d_cell_16_voltage_is_in_range(uint16_t value);

/**
 * Pack message BMSData_E.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_mc2_bms_data_e_pack(
    uint8_t *dst_p,
    const struct bms_mc2_bms_data_e_t *src_p,
    size_t size);

/**
 * Unpack message BMSData_E.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_mc2_bms_data_e_unpack(
    struct bms_mc2_bms_data_e_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMSData_E.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bms_mc2_bms_data_e_init(struct bms_mc2_bms_data_e_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_mc2_bms_data_e_temp1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_bms_data_e_temp1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_bms_data_e_temp1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_mc2_bms_data_e_temp2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_bms_data_e_temp2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_bms_data_e_temp2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_mc2_bms_data_e_temp3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_bms_data_e_temp3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_bms_data_e_temp3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_mc2_bms_data_e_temp4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_bms_data_e_temp4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_bms_data_e_temp4_is_in_range(uint16_t value);

/**
 * Pack message BMSData_F.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_mc2_bms_data_f_pack(
    uint8_t *dst_p,
    const struct bms_mc2_bms_data_f_t *src_p,
    size_t size);

/**
 * Unpack message BMSData_F.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_mc2_bms_data_f_unpack(
    struct bms_mc2_bms_data_f_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMSData_F.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bms_mc2_bms_data_f_init(struct bms_mc2_bms_data_f_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_mc2_bms_data_f_temp5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_bms_data_f_temp5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_bms_data_f_temp5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_mc2_bms_data_f_temp6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_bms_data_f_temp6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_bms_data_f_temp6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_mc2_bms_data_f_temp7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_bms_data_f_temp7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_bms_data_f_temp7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_mc2_bms_data_f_temp8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_bms_data_f_temp8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_bms_data_f_temp8_is_in_range(uint16_t value);

/**
 * Pack message BMSData_G.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_mc2_bms_data_g_pack(
    uint8_t *dst_p,
    const struct bms_mc2_bms_data_g_t *src_p,
    size_t size);

/**
 * Unpack message BMSData_G.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_mc2_bms_data_g_unpack(
    struct bms_mc2_bms_data_g_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMSData_G.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bms_mc2_bms_data_g_init(struct bms_mc2_bms_data_g_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_mc2_bms_data_g_temp9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_bms_data_g_temp9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_bms_data_g_temp9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_mc2_bms_data_g_temp10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_bms_data_g_temp10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_bms_data_g_temp10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_mc2_bms_data_g_temp11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_bms_data_g_temp11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_bms_data_g_temp11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bms_mc2_bms_data_g_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_bms_data_g_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_bms_data_g_current_is_in_range(uint16_t value);

/**
 * Pack message ConfigDataCommand.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_mc2_config_data_command_pack(
    uint8_t *dst_p,
    const struct bms_mc2_config_data_command_t *src_p,
    size_t size);

/**
 * Unpack message ConfigDataCommand.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_mc2_config_data_command_unpack(
    struct bms_mc2_config_data_command_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ConfigDataCommand.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bms_mc2_config_data_command_init(struct bms_mc2_config_data_command_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bms_mc2_config_data_command_calibration_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_config_data_command_calibration_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_config_data_command_calibration_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bms_mc2_config_data_command_store_changes_flag_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_config_data_command_store_changes_flag_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_config_data_command_store_changes_flag_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bms_mc2_config_data_command_update_value_flag_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_config_data_command_update_value_flag_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_config_data_command_update_value_flag_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bms_mc2_config_data_command_check_value_flag_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_config_data_command_check_value_flag_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_config_data_command_check_value_flag_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bms_mc2_config_data_command_value_index_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_config_data_command_value_index_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_config_data_command_value_index_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bms_mc2_config_data_command_charger_present_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_config_data_command_charger_present_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_config_data_command_charger_present_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bms_mc2_config_data_command_request_balancing_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_config_data_command_request_balancing_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_config_data_command_request_balancing_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bms_mc2_config_data_command_request_report_now_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_config_data_command_request_report_now_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_config_data_command_request_report_now_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t bms_mc2_config_data_command_raw_float_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_config_data_command_raw_float_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_config_data_command_raw_float_is_in_range(uint32_t value);

/**
 * Pack message ConfigDataResponse.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_mc2_config_data_response_pack(
    uint8_t *dst_p,
    const struct bms_mc2_config_data_response_t *src_p,
    size_t size);

/**
 * Unpack message ConfigDataResponse.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_mc2_config_data_response_unpack(
    struct bms_mc2_config_data_response_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ConfigDataResponse.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bms_mc2_config_data_response_init(struct bms_mc2_config_data_response_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bms_mc2_config_data_response_calibration_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_config_data_response_calibration_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_config_data_response_calibration_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bms_mc2_config_data_response_unknown_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_config_data_response_unknown_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_config_data_response_unknown_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bms_mc2_config_data_response_update_success_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_config_data_response_update_success_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_config_data_response_update_success_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bms_mc2_config_data_response_store_success_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_config_data_response_store_success_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_config_data_response_store_success_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bms_mc2_config_data_response_value_index_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_config_data_response_value_index_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_config_data_response_value_index_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bms_mc2_config_data_response_charging_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_config_data_response_charging_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_config_data_response_charging_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bms_mc2_config_data_response_balancing_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_config_data_response_balancing_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_config_data_response_balancing_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t bms_mc2_config_data_response_raw_float_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_config_data_response_raw_float_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_config_data_response_raw_float_is_in_range(uint32_t value);

/**
 * Pack message UrgentStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bms_mc2_urgent_status_pack(
    uint8_t *dst_p,
    const struct bms_mc2_urgent_status_t *src_p,
    size_t size);

/**
 * Unpack message UrgentStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bms_mc2_urgent_status_unpack(
    struct bms_mc2_urgent_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from UrgentStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bms_mc2_urgent_status_init(struct bms_mc2_urgent_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bms_mc2_urgent_status_not_configured_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_urgent_status_not_configured_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_urgent_status_not_configured_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bms_mc2_urgent_status_over_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_urgent_status_over_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_urgent_status_over_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bms_mc2_urgent_status_over_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_urgent_status_over_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_urgent_status_over_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bms_mc2_urgent_status_over_discharge_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_urgent_status_over_discharge_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_urgent_status_over_discharge_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bms_mc2_urgent_status_under_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_urgent_status_under_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_urgent_status_under_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bms_mc2_urgent_status_under_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_urgent_status_under_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_urgent_status_under_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bms_mc2_urgent_status_over_charge_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_urgent_status_over_charge_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_urgent_status_over_charge_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bms_mc2_urgent_status_lost_comms_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_urgent_status_lost_comms_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_urgent_status_lost_comms_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bms_mc2_urgent_status_out_of_balance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bms_mc2_urgent_status_out_of_balance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bms_mc2_urgent_status_out_of_balance_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
